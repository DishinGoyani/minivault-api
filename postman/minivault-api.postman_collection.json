{
	"info": {
		"_postman_id": "f769b847-f735-4fbf-9f52-bae45e266294",
		"name": "MiniVault API v2.0 - Local LLM",
		"description": "Complete API testing collection for MiniVault with local LLM capabilities",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26564572"
	},
	"item": [
		{
			"name": "1. Health & Status",
			"item": [
				{
					"name": "Root - API Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/",
						"description": "Get API information and current LLM status"
					},
					"response": []
				},
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{base_url}}/health",
						"description": "Check API health and LLM loading status"
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Basic Generation",
			"item": [
				{
					"name": "Simple Greeting",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Hello, how are you today?\"\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test basic greeting with the local LLM"
					},
					"response": []
				},
				{
					"name": "Question About AI",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"What is artificial intelligence?\"\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test AI knowledge question"
					},
					"response": []
				},
				{
					"name": "Creative Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Tell me a short joke about programming\"\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test creative content generation"
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Advanced Generation",
			"item": [
				{
					"name": "Custom Temperature (High Creativity)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Write a creative story about a robot discovering emotions\",\n  \"temperature\": 0.9,\n  \"max_length\": 150\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test high creativity with custom temperature"
					},
					"response": []
				},
				{
					"name": "Custom Temperature (Low Creativity)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Explain the concept of machine learning in simple terms\",\n  \"temperature\": 0.3,\n  \"max_length\": 120\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test low creativity for factual responses"
					},
					"response": []
				},
				{
					"name": "Long Response",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Describe the future of artificial intelligence and its impact on society\",\n  \"max_length\": 250,\n  \"temperature\": 0.7\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test longer response generation"
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Configuration",
			"item": [
				{
					"name": "Update LLM Config - Creative",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"config\": {\n    \"temperature\": 0.8,\n    \"max_length\": 150,\n    \"do_sample\": true\n  }\n}"
						},
						"url": "{{base_url}}/config",
						"description": "Configure LLM for creative responses"
					},
					"response": []
				},
				{
					"name": "Update LLM Config - Factual",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"config\": {\n    \"temperature\": 0.2,\n    \"max_length\": 100,\n    \"do_sample\": false\n  }\n}"
						},
						"url": "{{base_url}}/config",
						"description": "Configure LLM for factual, deterministic responses"
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Creative Tasks",
			"item": [
				{
					"name": "Write a Haiku",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Write a haiku about artificial intelligence\",\n  \"temperature\": 0.8\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Creative writing task - haiku"
					},
					"response": []
				},
				{
					"name": "Story Beginning",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Once upon a time, in a world where AI and humans lived together...\",\n  \"temperature\": 0.9,\n  \"max_length\": 200\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Creative story continuation"
					},
					"response": []
				},
				{
					"name": "Code Explanation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Explain this Python code: def fibonacci(n): return n if n <= 1 else fibonacci(n-1) + fibonacci(n-2)\",\n  \"temperature\": 0.4\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Code explanation task"
					},
					"response": []
				}
			]
		},
		{
			"name": "7. Edge Cases",
			"item": [
				{
					"name": "Empty Prompt",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"\"\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test empty prompt handling"
					},
					"response": []
				},
				{
					"name": "Very Long Prompt",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"This is a very long prompt that tests how the model handles extensive input text. It contains multiple sentences and covers various topics like artificial intelligence, machine learning, natural language processing, computer vision, robotics, and the future of technology. The purpose is to see how well the model can process and respond to lengthy input while maintaining coherence and relevance in its response.\"\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test very long prompt handling"
					},
					"response": []
				},
				{
					"name": "Special Characters",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"What about émojis 🤖 and spéciàl characters? Can you handle unicode: 你好, مرحبا, こんにちは?\"\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test special characters and Unicode"
					},
					"response": []
				}
			]
		},
		{
			"name": "8. Performance Testing",
			"item": [
				{
					"name": "Quick Response Test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Hi!\",\n  \"max_length\": 50\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test quick response generation"
					},
					"response": []
				},
				{
					"name": "Maximum Length Test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"prompt\": \"Tell me everything you know about the history of computers\",\n  \"max_length\": 300,\n  \"temperature\": 0.6\n}"
						},
						"url": "{{base_url}}/generate",
						"description": "Test maximum length response"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					"// Set timestamp for requests",
					"pm.globals.set('timestamp', new Date().toISOString());"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					"// Basic response validation",
					"pm.test('Status code is 200', function () {",
					"    pm.response.to.have.status(200);",
					"});",
					"",
					"pm.test('Response time is reasonable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(30000);",
					"});",
					"",
					"pm.test('Response has correct content type', function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});",
					"",
					"// Test specific to generate endpoint",
					"if (pm.request.url.path.includes('generate')) {",
					"    pm.test('Generate response has required fields', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('response');",
					"        pm.expect(jsonData.response).to.be.a('string');",
					"        pm.expect(jsonData.response.length).to.be.greaterThan(0);",
					"    });",
					"}",
					"",
					"// Test specific to health endpoint",
					"if (pm.request.url.path.includes('health')) {",
					"    pm.test('Health response has required fields', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('status');",
					"        pm.expect(jsonData).to.have.property('llm_loaded');",
					"        pm.expect(jsonData.status).to.equal('healthy');",
					"    });",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
}